 Callback Functions:
What will happen if you pass a callback function to setTimeout() but forget to specify the delay time?
What is the result if you call a callback inside a loop in a non-async function? Will it run multiple times or just once?
If you pass a function that calls a callback to setInterval(), and the callback itself throws an error, what happens to the interval?
What happens if you pass a callback to a function that is designed to execute asynchronously but you forget to invoke the callback?
You have a callback function that performs database operations, but one operation fails. How would you propagate the error to the caller?
You have two callbacks that execute in parallel, and you want to run a final task after both complete. How would you do this without using Promises?
If a callback function is asynchronous but you expect it to behave synchronously, what kind of issues can arise?
Given the code below, what will be the value of result when processData completes?
javascript
Copy
function processData(callback) {
  let result = 5;
  callback(result);
}
processData((data) => {
  data += 10;
});
2. Promises:
You have a promise that might reject, and you want to chain multiple actions only if the promise is resolved. How would you do this?
What will happen if you pass a non-Promise value to Promise.all()?
If you call Promise.reject() and pass it an error, what will happen to the promise chain that follows it?
You are chaining two promises, and the second one depends on the result of the first one. What will happen if the first promise rejects?
You use Promise.all() to wait for multiple promises, and one of them rejects. What will be the behavior?
You have the following code:
javascript
Copy
const p1 = new Promise((resolve, reject) => {
  setTimeout(resolve, 1000, "Hello");
});
const p2 = p1.then((res) => {
  return new Promise((resolve, reject) => {
    setTimeout(resolve, 1000, `${res} World`);
  });
});
What will the final value of p2 be?
How would you rewrite the following code using Promises (assuming setData() and getData() are async functions)?
javascript
Copy
setData(function() {
  getData(function(data) {
    console.log(data);
  });
});
If you have a promise that rejects, and you use .catch() to handle the error, but it still causes the program to crash, why could that be?
You have multiple promises running in parallel, and you want to execute the next step only after all promises are completed. How would you do that?
If you want to execute code after a promise settles (whether it resolves or rejects), which method would you use?
How can you turn an asynchronous callback-based function into a promise-based function?
3. Async/Await:
You have an async function that returns a resolved promise. What is the return value of this function if you await it?
You are using await inside an async function. What will happen if you try to await a non-promise value?
In the following code, what happens if the fetchData() promise rejects before the await statement?
javascript
Copy
async function getData() {
  const data = await fetchData();
  console.log(data);
}
What happens if an error is thrown in an async function but is not caught?
How would you handle multiple async functions that depend on each other in sequence using async/await?
What will happen if you await a promise inside a for loop in an async function? How can you optimize it?
How would you handle multiple asynchronous tasks in parallel using async/await?
You have an async function, and you're using await inside it. What happens if you call this function without await?
If you have two async functions, one of which resolves and another rejects, and you await both, which result will you get?
If you use await in a try/catch block, what kind of errors will be caught?
You call an async function inside Promise.all(). How does that affect the behavior of the promises?
How would you refactor the following callback code into async/await?
javascript
Copy
fs.readFile('data.json', (err, data) => {
  if (err) return console.log(err);
  console.log(data);
});
Given the following async function, what will happen when you run it?
javascript
Copy
async function fetchData() {
  const response = await fetch('https://api.example.com/data');
  const data = await response.json();
  return data;
}
fetchData().then(result => console.log(result));
What will happen if an await expression in an async function takes longer than expected, and the function continues executing other code before the awaited promise resolves?
What is the advantage of using async/await over .then() chaining in a promise chain?
What will happen if you forget to await a promise inside an async function?
How would you use async/await to handle multiple API requests in a sequential order?
In the following code, why might the catch block not execute?
javascript
Copy
async function foo() {
  throw new Error("An error occurred");
}
foo().catch((err) => console.log(err));
What is the purpose of await inside an async function, and how does it affect the flow of the program?
How would you handle a case where multiple async functions are running concurrently and you need to stop if one fails?
4. Mixed Scenarios (Callback + Promise + Async/Await):
You have a promise chain, but you need to run a function after all promises have resolved, regardless of whether they succeed or fail. How do you implement this with async/await?
What happens when an error is thrown inside an async function and there is no catch block? How does it behave with Promises?
Given the following code, what will happen to the flow if p1 is rejected?
javascript
Copy
async function fetchData() {
  const p1 = await fetch('/data1');
  const p2 = await fetch('/data2');
  return { p1, p2 };
}
How would you use a combination of callbacks and promises to ensure that a function continues only after an async task completes?
You have a function that returns a promise, and you want to run a callback after the promise resolves. How would you combine callbacks and promises in this case?
How would you handle multiple promises that need to run in parallel, and you want to ensure that a final task runs only after all are completed?
Given the following async function, what will happen when the await inside fetchData() is rejected?
javascript
Copy
async function fetchData() {
  const result = await fetch('/data');
  return result;
}
fetchData().then(console.log).catch(console.log);
How would you use Promise.all() in combination with async/await to fetch data from multiple APIs and wait for all responses before continuing?
What happens if you combine await and Promise.race() in a scenario where multiple promises resolve or reject?
Given an async function that calls another async function that might reject, how would you handle errors without letting the rejection affect the rest of the program?
These scenario-based questions will help you assess a candidate's deeper understanding of callbacks, promises, and async/await, and their ability to reason about real-world asynchronous JavaScript code.